{"cells":[{"cell_type":"markdown","metadata":{"id":"D0XnvG1VH0uH"},"source":["1. Cho tập dữ liệu như sau:\n","X = {150, 147, 150, 153, 158, 163, 165, 168, 170, 173, 175, 178, 180, 183}\n","Y = {90, 49, 50, 51, 54, 58, 59, 60, 62, 63, 64, 66, 67, 68}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wLGuggHEH_1I"},"outputs":[],"source":["X = [150, 147, 150, 153, 158, 163, 165, 168, 170, 173, 175, 178, 180, 183]\n","y = [90, 49, 50, 51, 54, 58, 59, 60, 62, 63, 64, 66, 67, 68]"]},{"cell_type":"markdown","metadata":{"id":"LiWarPkjH5cv"},"source":["* Biểu diễn tập dữ liệu lên mặt phẳng toạ độ Oxy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"VsKzI1LkH9ja","outputId":"b6f49934-84e2-421e-c03a-604a72f93d77","executionInfo":{"status":"ok","timestamp":1679469681747,"user_tz":-420,"elapsed":25,"user":{"displayName":"Nguyen Le Sac B2014605","userId":"13627146757218967929"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7ff58fb74f40>"]},"metadata":{},"execution_count":2},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAP5klEQVR4nO3dbYxc5XmH8euuDXRBTZaXjWU2ULsNuK2wsGGLkBxoA0ldUFu7boXIl1otqtWob4BqxahSk2926lRVK1Wp3JDWaQWFRMZYQuWldpNWleJ0jd3YJHEhBIIXY28Ap1KySh3n7oc5jnfXM95Z+8zsedjrJ61m5tkzM7ceL3/OPPeccyIzkSSV58fmugBJ0vkxwCWpUAa4JBXKAJekQhngklSohf18s6uuuiqXLFnSz7eUpOLt27fv25k5NH28rwG+ZMkSRkdH+/mWklS8iHi13bhLKJJUKANckgplgEtSoQxwSSqUAS5JheoqwCPijyPiUES8EBH3V2NXRMRzEfFidXt5TyvtoZ37x1i1ZQ9LNz3Fqi172Ll/bK5LkqQZzRjgEXED8LvALcCNwK9ExPuATcDuzLwO2F09Ls7O/WM8tOMgYycmSGDsxAQP7ThoiEtqvG72wH8W2JuZ38vMHwBfBNYBa4Dt1TbbgbU9qbDHtj5zmImTp6aMTZw8xdZnDs9RRZLUnW4C/BBwW0RcGRGXAncD1wCLMvNotc0bwKJ2T46IDRExGhGj4+PjtRRdp9dPTMxqXJKaYsYAz8yvAZ8AngWeBg4Ap6Ztk0DbK0Nk5rbMHMnMkaGhs44EnXNXDw7MalySmqKrJmZmPpyZN2fm7cDbwP8AxyJiMUB1e7x3ZfbOxtXLGLhowZSxgYsWsHH1sjmqSJK60+23UN5T3V5La/37EWAXsL7aZD3wZC8K7LW1K4fZvG45w4MDBDA8OMDmdctZu3J4rkuTpHOKbq6JGRH/AVwJnAQezMzdEXEl8DhwLfAqcE9mvnWu1xkZGUlPZiVJsxMR+zJzZPp4V2cjzMzb2oy9CdxZQ22SpPPgkZiSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKpQBLkmFMsAlqVAGuCQVygCXpEIZ4JJUKANckgplgEtSoQxwSSqUAS5JhTLAJalQBrgkFcoAl6RCGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKpQBLkmFMsAlqVAGuCQVqqsAj4gHIuKFiDgUEY9GxI9HxNKI2BsRL0XEYxFxca+LlSSdMWOAR8Qw8EfASGbeACwA7gU+AfxlZr4PeBu4r5eFSpKm6nYJZSEwEBELgUuBo8AdwOer328H1tZenSSpoxkDPDPHgE8C36IV3N8B9gEnMvMH1WZHgOF2z4+IDRExGhGj4+Pj9VQtSepqCeVyYA2wFLgauAz45W7fIDO3ZeZIZo4MDQ2dd6GSpKm6WUL5IPDNzBzPzJPADmAVMFgtqQC8FxjrUY2SpDa6CfBvAbdGxKUREcCdwFeBfwN+s9pmPfBkb0qUJLXTzRr4XlrNyueBg9VztgEfBR6MiJeAK4GHe1inJGmahTNvApn5MeBj04ZfBm6pvSJJUlc8ElOSCmWAS1KhDHBJKpQBLkmFMsAlqVAGuCQVygCXpEIZ4JJUKANckgplgEtSoQxwSSqUAS5JhTLAJalQBrgkFcoAl6RCGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCmWAS1KhDHBJKpQBLkmFMsAlqVAGuCQVygCXpEIZ4JJUKANckgplgEtSoQxwSSqUAS5JhTLAJalQBrgkFcoAl6RCGeCSVKgZAzwilkXEgUk//xsR90fEFRHxXES8WN1e3o+CJUktMwZ4Zh7OzBWZuQK4Gfge8ASwCdidmdcBu6vHkqQ+me0Syp3ANzLzVWANsL0a3w6srbEuSdIMZhvg9wKPVvcXZebR6v4bwKJ2T4iIDRExGhGj4+Pj51mmJGm6rgM8Ii4Gfg343PTfZWYC2e55mbktM0cyc2RoaOi8C5UkTTWbPfC7gOcz81j1+FhELAaobo/XXZwkqbPZBPiHObN8ArALWF/dXw88WVdRkqSZdRXgEXEZ8CFgx6ThLcCHIuJF4IPVY0lSnyzsZqPM/C5w5bSxN2l9K0WSNAe6CnBJ0uzt3D/G1mcO8/qJCa4eHGDj6mWsXTlc2+sb4JLUAzv3j/HQjoNMnDwFwNiJCR7acRCgthD3XCiS1ANbnzn8o/A+beLkKbY+c7i29zDAJakHXj8xMavx82GAS1IPXD04MKvx82GAS5qXdu4fY9WWPSzd9BSrtuxh5/6xWl9/4+plDFy0YMrYwEUL2Lh6WW3vYRNT0rzTjwbj6dfxWyiSVKNzNRjrDNi1K4drfb3pXEKRNO/0o8HYDwa4pHmnHw3GfjDAJRXnQhuQ/Wgw9oNr4JKKUkcDsh8Nxn4wwCUVpa4GZK8bjP3gEoqkorxTGpB1MMAlFeWd0oCsgwEuqSjvlAZkHVwDl1SUd0oDsg4GuKTivBMakHVwCUWSCmWAS1KhXEKRVKteXwdSZxjgkmrTj9O06gyXUCTVph/XgdQZBrik2niUZH+5hCLpRy50/frqwQHG2oT1fDxKsh/cA5cEnFm/HjsxQXJm/Xo2p2r1KMn+MsAlAfWsX69dOczmdcsZHhwggOHBATavW24Ds0dcQpEE1Ld+7VGS/eMeuCTAs/yVyACXCnChlxDrhuvX5XEJRWq4fh0c41n+ymOASw1X1yXEuuH6dVlcQpEazoNj1IkBLjWczUV1YoBLDWdzUZ24Bi41nM1FdWKASwWwuah2XEKRpEIZ4JJUqK6WUCJiEPg0cAOQwO8Ah4HHgCXAK8A9mfl2L4qUSudlxtQL3e6B/xXwdGb+DHAj8DVgE7A7M68DdlePJU1Tx2lapXZmDPCIeDdwO/AwQGb+X2aeANYA26vNtgNre1OiVDYvM6Ze6WYPfCkwDvx9ROyPiE9HxGXAosw8Wm3zBrCo3ZMjYkNEjEbE6Pj4eD1VSwXxSEr1SjcBvhC4CfhUZq4Evsu05ZLMTFpr42fJzG2ZOZKZI0NDQxdar1Qcj6RUr3QT4EeAI5m5t3r8eVqBfiwiFgNUt8d7U6LUO56mVSWbMcAz8w3gtYg4/dd2J/BVYBewvhpbDzzZkwqlHulXc9HLjKlXorX6McNGEStofY3wYuBl4Ldphf/jwLXAq7S+RvjWuV5nZGQkR0dHL7BkqR6rtuxpewX14cEB/nPTHXNQkdReROzLzJHp4119DzwzDwBnPZnW3rhUJJuLKp1HYmresrmo0hngKtaFNiBtLqp0no1QRarjOpGeplWlM8BVpLquE+lpWlUyl1BUJBuQkgGuQtmAlAxwFcoGpOQauAplA1IywFUwG5Ca71xCkaRCGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUAa4JBXKAJekQhngklQoA1ySCuW5UHSWnfvHPEmUVAADXFPUcakySf3hEoqmONelyiQ1iwGuKbxUmVQOA1xTeKkyqRwGuKbwUmVSOWxiagovVSaVwwDXWbxUmVQGl1AkqVAGuCQVygCXpEIZ4JJUKANckgplgEtSofwaYR95lj9JdTLA+8Sz/Emqm0sofeJZ/iTVzQDvE8/yJ6luBnifeJY/SXXrKsAj4pWIOBgRByJitBq7IiKei4gXq9vLe1tq7+zcP8aqLXtYuukpVm3Zw879Y7W/h2f5k1S32eyBfyAzV2TmSPV4E7A7M68DdlePi3O6uTh2YoLkTHOx7hBfu3KYzeuWMzw4QADDgwNsXrfcBqak83Yh30JZA/xidX878AXgoxdYT9+dq7lYd7h6lj9Jdep2DzyBZyNiX0RsqMYWZebR6v4bwKJ2T4yIDRExGhGj4+PjF1hu/WwuSipVtwH+/sy8CbgL+P2IuH3yLzMzaYX8WTJzW2aOZObI0NDQhVXbAzYXJZWqqwDPzLHq9jjwBHALcCwiFgNUt8d7UWCvG4w2FyWVasYAj4jLIuInTt8Hfgk4BOwC1lebrQeerLu4fjQYbS5KKlU3TcxFwBMRcXr7RzLz6Yj4L+DxiLgPeBW4p+7i+tVgtLkoqUQzBnhmvgzc2Gb8TeDOXhR1mg1GSeqs0Udi2mCUpM4aHeA2GCWps0afTvb0urTn0JakszU6wMEGoyR10uglFElSZwa4JBXKAJekQhngklQoA1ySChWtEwn26c0ixmkddt9UVwHfnusiulRKrdZZr1LqhHJqLaHOn8zMs07n2tcAb7qIGJ10xaFGK6VW66xXKXVCObWWUmc7LqFIUqEMcEkqlAE+1ba5LmAWSqnVOutVSp1QTq2l1HkW18AlqVDugUtSoQxwSSrUvArwiPhMRByPiEOTxj4eEWMRcaD6uXvS7x6KiJci4nBErG5inRGxJCImJo3/bb/q7FRrNf6HEfH1iHghIv580nhj5rRTnXM5px3+7R+bVMsrEXFg0u8aM5+d6mzi32hErIiIL1X1jEbELdV4RMRfV3P6lYi4qZ+1zlpmzpsf4HbgJuDQpLGPA3/SZtufA/4buARYCnwDWNDAOpdM3q4hc/oB4F+BS6rH72nonHaqc87mtF2d037/F8CfNXE+z1FnE/9GnwXuqu7fDXxh0v1/AQK4Fdg7V3V38zOv9sAz89+Bt7rcfA3wz5n5/cz8JvAScEvPiptklnXOqQ61fgTYkpnfr7Y5Xo03bU471TlnzvVvH60ri98DPFoNNW0+O9U5pzrUmsC7qvvvBl6v7q8BPpstXwIGI2JxfyqdvXkV4OfwB9XHpc9ExOXV2DDw2qRtjlRjc6ldnQBLI2J/RHwxIm6bs+rOuB64LSL2VjX9fDXetDntVCc0b04BbgOOZeaL1eOmzedp0+uE5s3n/cDWiHgN+CTwUDXe1DltywCHTwE/DawAjtL66NdEneo8ClybmSuBB4FHIuJdbV+hfxYCV9D6CLoReLzaK2uaTnU2cU4BPkxD9mpnML3OJs7nR4AHMvMa4AHg4Tmu57zM+wDPzGOZeSozfwj8HWc+go4B10za9L3V2JzoVGf18fnN6v4+Wuug189VnZUjwI7qY+iXgR/SOmFQo+aUDnU2cU4jYiGwDnhs0nDT5rNtnU2cT2A9sKO6/zka+t/9TOZ9gE9b3/p14HSnehdwb0RcEhFLgeuAL/e7vtM61RkRQxGxoLr/U7TqfLn/FU6xk1aDkIi4HriY1tneGjWndKizoXP6QeDrmXlk0ljT5hPa1NnQ+Xwd+IXq/h3A6eWeXcBvVd9GuRX4TmYenYsCuzLXXdR+/tD6WHcUOElr7+s+4B+Bg8BXaP3jLZ60/Z/S2ls4TNWxblqdwG8ALwAHgOeBX23AnF4M/BOt/8k8D9zR0DltW+dczmm7OqvxfwB+r832jZnPTnU29G/0/cA+Wt/i2QvcXG0bwN9Uc3oQGOlnrbP98VB6SSrUvF9CkaRSGeCSVCgDXJIKZYBLUqEMcEkqlAEuSYUywCWpUP8PTtcLrLYUQGgAAAAASUVORK5CYII=\n"},"metadata":{"needs_background":"light"}}],"source":["import matplotlib.pyplot as plt\n","plt.scatter(X,y)"]},{"cell_type":"markdown","metadata":{"id":"uE5qfM8mIYMR"},"source":["* Vẽ đường hồi quy lên mặt phẳng toạ độ"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L6RC1PrOQh2s","outputId":"84e5a37d-6a9d-4abb-ed71-ff9d9b3b1306","executionInfo":{"status":"ok","timestamp":1679469687845,"user_tz":-420,"elapsed":728,"user":{"displayName":"Nguyen Le Sac B2014605","userId":"13627146757218967929"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[51.0,\n"," 50.0,\n"," 51.0,\n"," 52.0,\n"," 53.666666666666664,\n"," 55.333333333333336,\n"," 56.0,\n"," 57.0,\n"," 57.666666666666664,\n"," 58.666666666666664,\n"," 59.333333333333336,\n"," 60.333333333333336,\n"," 61.0,\n"," 62.0]"]},"metadata":{},"execution_count":3}],"source":["def t(X):\n","  l = []\n","  for i in X:\n","    a = 1 + i/3\n","    l.append(a)\n","  return l\n","y_sub = t(X)\n","y_sub"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"QlElDMyRL4Wx","outputId":"5a31c729-5d06-45ce-bf51-480144c417ff","executionInfo":{"status":"ok","timestamp":1679469692639,"user_tz":-420,"elapsed":754,"user":{"displayName":"Nguyen Le Sac B2014605","userId":"13627146757218967929"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7ff58c395220>]"]},"metadata":{},"execution_count":4},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["plt.plot(X,y,'ro')\n","plt.plot(X,y_sub)"]},{"cell_type":"markdown","metadata":{"id":"rd4Pp3RLKjRz"},"source":["Nhận xét kết quả và đề xuất hướng xử lý"]},{"cell_type":"markdown","metadata":{"id":"XAQ0EM0WKmu9"},"source":["ta "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":372},"id":"3QkreF6_v6Te","outputId":"29716439-639c-4810-e256-01b9b8a8e0f3","executionInfo":{"status":"ok","timestamp":1679475530295,"user_tz":-420,"elapsed":443,"user":{"displayName":"Nguyen Le Sac B2014605","userId":"13627146757218967929"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["w =  [[-33.73541021]\n"," [  0.55920496]]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-6-3ca06af6d83f>:21: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"ro\" (-> color='r'). The keyword argument will take precedence.\n","  plt.plot(x.T, y.T, 'ro', color =\"green\")     # data\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","x = np.array([[ 147, 150, 153, 158, 163, 165, 168, 170, 173, 175, 178, 180, 183]]).T\n","y = np.array([[ 49, 50, 51, 54, 58, 59, 60, 62, 63, 64, 66, 67, 68]]).T\n","\n","one = np.ones((x.shape[0],1))\n","Xbar = np.concatenate((one, x),axis = 1)\n","\n","A = np.dot(Xbar.T, Xbar)\n","b = np.dot(Xbar.T, y)\n","w = np.dot(np.linalg.pinv(A), b)\n","print('w = ', w)\n","\n","w_0 = w[0][0]\n","w_1 = w[1][0]\n","x0 = np.linspace(145, 185, 2)\n","y0 = w_0 + w_1*x0\n","\n","# Drawing the fitting line \n","plt.plot(x.T, y.T, 'ro', color =\"green\")     # data \n","plt.plot(x0, y0)               # the fitting line\n","plt.axis([140, 190, 40, 100])\n","plt.xlabel(\"Gia tri thuoc tinh x\")\n","plt.ylabel(\"Gia tri du doan y\")\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"x98vhaxPHeel"},"source":["2. Sử dụng thuộc tính (lotsize, bedrooms, stories, garagepl) trong tập dữ liệu\n","Housing_2019.csv để dự báo giá nhà. Sử dụng nghi thức hold-out để huấn luyện và\n","đánh giá mô hình. Sử dụng chỉ số MSE và RMSE để đánh giá mô hình"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"9dhuwaYyzmU4","outputId":"4c6eed69-7a8e-4e6e-a43d-21b3152530ee"},"outputs":[{"data":{"text/html":["\n","     <input type=\"file\" id=\"files-a8661313-c8d2-4074-8972-43fb4616796b\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a8661313-c8d2-4074-8972-43fb4616796b\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Saving Housing_2019.csv to Housing_2019.csv\n"]}],"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"SDM0hUCZ1kIN","outputId":"022429d1-068d-466a-8233-60e4c9a50b74"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-e468a6e4-8192-414e-a6cb-449cf2bd71ab\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>price</th>\n","      <th>lotsize</th>\n","      <th>bedrooms</th>\n","      <th>bathrms</th>\n","      <th>stories</th>\n","      <th>driveway</th>\n","      <th>recroom</th>\n","      <th>fullbase</th>\n","      <th>gashw</th>\n","      <th>airco</th>\n","      <th>garagepl</th>\n","      <th>prefarea</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>42000.0</td>\n","      <td>5850</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>1</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>38500.0</td>\n","      <td>4000</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>0</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>49500.0</td>\n","      <td>3060</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>0</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60500.0</td>\n","      <td>6650</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>yes</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>0</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>61000.0</td>\n","      <td>6360</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>0</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e468a6e4-8192-414e-a6cb-449cf2bd71ab')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e468a6e4-8192-414e-a6cb-449cf2bd71ab button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e468a6e4-8192-414e-a6cb-449cf2bd71ab');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["     price  lotsize  bedrooms  bathrms  stories driveway recroom fullbase  \\\n","1  42000.0     5850         3        1        2      yes      no      yes   \n","2  38500.0     4000         2        1        1      yes      no       no   \n","3  49500.0     3060         3        1        1      yes      no       no   \n","4  60500.0     6650         3        1        2      yes     yes       no   \n","5  61000.0     6360         2        1        1      yes      no       no   \n","\n","  gashw airco  garagepl prefarea  \n","1    no    no         1       no  \n","2    no    no         0       no  \n","3    no    no         0       no  \n","4    no    no         0       no  \n","5    no    no         0       no  "]},"execution_count":51,"metadata":{},"output_type":"execute_result"}],"source":["import pandas as pd\n","dt = pd.read_csv(\"Housing_2019.csv\", index_col = 0)\n","dt.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x8FURXZn15B_"},"outputs":[],"source":["X = dt.iloc[:,[1,2,4,10]]\n","y = dt.price\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZfqTFSvT2ZDW","outputId":"cc479e2d-7d4e-4fc8-fae2-c736f34710c0"},"outputs":[{"data":{"text/plain":["LinearRegression()"]},"execution_count":53,"metadata":{},"output_type":"execute_result"}],"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X,y,train_size = 0.3, random_state = 42)\n","\n","from sklearn import linear_model\n","lm = linear_model.LinearRegression()\n","lm.fit(X_train, y_train)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mEROBXdQ40DY"},"outputs":[],"source":["y_pred = lm.predict(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sh8xy2D649qn","outputId":"8c930d29-a713-4dc4-a287-48a9bff02184"},"outputs":[{"data":{"text/plain":["20175.73020014342"]},"execution_count":56,"metadata":{},"output_type":"execute_result"}],"source":["from sklearn.metrics import mean_squared_error\n","import numpy as np\n","err = mean_squared_error(y_test, y_pred)\n","result = np.sqrt(err)\n","result"]},{"cell_type":"markdown","metadata":{"id":"RJfreBmfHoFD"},"source":["3. Thí nghiệm sau đây tìm mối liên hệ giữa hàm lượng gỗ cứng (hardwoord\n","concentration) và độ căng (tensile strength) của vật liệu. Mười chín vật liệu khác nhau\n","với nhiều hàm lượng gỗ cứng được thử nghiệm để đo độ căng mạnh của vật liệu, và\n","kết quả được tóm lược trong bảng số liệu sau đây:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"5bcE43rL5gl3","outputId":"c399546c-0b34-4f87-fb98-af894b5a0bae"},"outputs":[{"data":{"text/html":["\n","     <input type=\"file\" id=\"files-5f7c482b-8a7b-4fe1-9bfc-ed984b439fb4\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-5f7c482b-8a7b-4fe1-9bfc-ed984b439fb4\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Saving ham_luong_go.csv to ham_luong_go (1).csv\n"]}],"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RpmhcF3ttef_"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","dt = pd.read_csv('ham_luong_go.csv')\n","dt.head()"]},{"cell_type":"markdown","metadata":{"id":"wpS94z1ptzlH"},"source":["Biểu đồ mối liên hệ giữa hàm lượng gỗ và độ căng mạnh"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4rSi1dF_uKbI","outputId":"1bd6f2a8-a039-4d93-81cf-2bc6cadf409f"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'numpy.ndarray'>\n","(19,)\n"]}],"source":["X = np.array([dt.x])\n","y = dt.y\n","X = X.reshape(-1,1)\n","print(type(X))\n","print(y.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":296},"id":"q2ZNf1XXuD2v","outputId":"154344e1-e521-4710-9191-cb556f029f66"},"outputs":[{"data":{"text/plain":["Text(0, 0.5, 'Do cang')"]},"execution_count":60,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","plt.plot(X,y)\n","plt.xlabel('Ham luong go')\n","plt.ylabel('Do cang')"]},{"cell_type":"markdown","metadata":{"id":"VmAHtKxdu6FM"},"source":["Xây dựng phương trình thể hiện mối liên hệ giữa hàm lượng gỗ cứng và độ căng mạnh của vật liệu."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3GnyBKibupZj","outputId":"21c0a095-9752-4132-b4de-8cc57e9922ed"},"outputs":[{"data":{"text/plain":["LinearRegression()"]},"execution_count":61,"metadata":{},"output_type":"execute_result"}],"source":["from sklearn import linear_model\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 1.0/10, random_state = 42)\n","lm = linear_model.LinearRegression()\n","lm.fit(X_train,y_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HY9XAF5CyhyR","outputId":"e52235ef-82f8-4223-c53b-4fada67724bd"},"outputs":[{"name":"stdout","output_type":"stream","text":["25.36666666666666\n","[1.37333333]\n"]}],"source":["print(lm.intercept_)\n","print(lm.coef_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YaLsI3g3ytqG","outputId":"e3997a71-97db-402d-ab5a-ae4314a7d84c"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[1. ]\n"," [4.5]]\n"]},{"data":{"text/plain":["array([26.74      , 31.54666667])"]},"execution_count":63,"metadata":{},"output_type":"execute_result"}],"source":["print(X_test)\n","y_pred = lm.predict(X_test)\n","y_pred"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pKEgJ__q1AYM","outputId":"c3b918f0-c0a0-4545-d51c-21bde1ecf827"},"outputs":[{"name":"stdout","output_type":"stream","text":["14.494581363009031\n"]}],"source":["from sklearn.metrics import mean_squared_error\n","err = mean_squared_error(y_test, y_pred)\n","print(np.sqrt(err))"]},{"cell_type":"markdown","metadata":{"id":"cv8jBsEc2596"},"source":["vậy ta có phương trình thể hiện mối liên hệ giữa hàm lượng gỗ cứng và độ căng mạnh của vật liệu là:\n","  y = 25.37 + 1.37X với y là độ căng và X là hàm lượng gỗ"]},{"cell_type":"markdown","metadata":{"id":"gn3hW7xB3yRz"},"source":["4. Áp dụng giải thuật Rừng ngẫu nhiên trên tập dữ liệu dự đoán chất lượng rượu vang\n","với nghi thức hold-out **văn bản in đậm**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"zD0BU72z265-","outputId":"a4127ce8-457f-4ff0-ae6d-c619bc1243a2"},"outputs":[{"data":{"text/html":["\n","     <input type=\"file\" id=\"files-a512748e-a1ac-4593-972b-a3451670355d\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a512748e-a1ac-4593-972b-a3451670355d\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"}],"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"y5giq2ngApvr"},"outputs":[],"source":["import pandas as pd\n","dt = pd.read_csv('winequality-white.csv', sep = ';')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QQHLdeNhBcvF","outputId":"7d01c900-2e50-4cbb-abad-a26798df68ec"},"outputs":[{"name":"stdout","output_type":"stream","text":["(4898, 11)\n","(4898,)\n"]}],"source":["X = dt.iloc[:,:11]\n","y = dt.quality\n","print(X.shape)\n","print(y.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"He-dKwmQBxY-"},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","X_train , X_test, y_train, y_test = train_test_split(X,y,test_size = 1.0/3, random_state=42)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b0Vy6hcrCFHM","outputId":"69cd3178-1840-4a79-edbe-07eb568c1736"},"outputs":[{"data":{"text/plain":["RandomForestRegressor(max_depth=5, random_state=0)"]},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":["from sklearn.ensemble import RandomForestRegressor\n","rd = RandomForestRegressor(max_depth=5, random_state = 0)\n","rd.fit(X_train,y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cU1RZF-JC0_b"},"outputs":[],"source":["y_pred = rd.predict(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DOHbSX7RDY4P","outputId":"2b0c7c8f-674d-4fd8-fc69-4a465b4bc8e6"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.6973631867926346\n"]}],"source":["from sklearn.metrics import mean_squared_error\n","err = mean_squared_error(y_test, y_pred)\n","print(np.sqrt(err))"]},{"cell_type":"markdown","metadata":{"id":"lxttcM-CDyRa"},"source":["Đánh giá mô hình với thực toán rừng ngẫu nhiên bằng RMSE"]},{"cell_type":"markdown","metadata":{"id":"Z0-ZIkHPD8bc"},"source":["5. Áp dụng giải thuật “AdaBoostClassifier” trên tập dữ liệu dự đoán chất lượng rượu\n","vang với nghi thức K-fold"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AHfmysqkD9nK","outputId":"216aeb22-686a-49e9-e4bb-41f8f0013b5d"},"outputs":[{"name":"stdout","output_type":"stream","text":["(979, 11) (979,)\n"]}],"source":["from sklearn.model_selection import KFold\n","kf = KFold(n_splits = 5)\n","for k_train,k_test in kf.split(X):\n","  X_train, X_test = X.iloc[k_train], X.iloc[k_test]\n","  y_train, y_test = y.iloc[k_train], y.iloc[k_test]\n","print(X_test.shape, y_test.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0fxWVvcjGOdN"},"outputs":[],"source":["from sklearn.ensemble import AdaBoostClassifier"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ffSNMSrMGc0M","outputId":"a0293cbc-ee92-48c6-a5a8-ea9848fb5e8b"},"outputs":[{"data":{"text/plain":["AdaBoostClassifier(n_estimators=100)"]},"execution_count":86,"metadata":{},"output_type":"execute_result"}],"source":["clf = AdaBoostClassifier(n_estimators=100)\n","clf.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-yqMqtSsGoCy"},"outputs":[],"source":["y_pred = clf.predict(X_test)\n","y_pred"]}],"metadata":{"colab":{"provenance":[{"file_id":"1z2Pq7ol1EPJvIp2XS2F-3r4C2yHOB4TJ","timestamp":1679488567045}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}