# -*- coding: utf-8 -*-
"""baitapnhomMHUD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pcCgakJ-LkW8wvuJ3kVg5XDST_fYLKgm
"""

import matplotlib.pyplot as plt #vẽ đỗ thị
import pandas as pd
import numpy as np #xử lý mảng
# sklearn libraries
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
from sklearn.preprocessing import LabelEncoder, StandardScaler, Normalizer #xử lý tập dữ liệu
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree #vẽ biểu đồ so sánh
from sklearn.neighbors import KNeighborsClassifier #knn
from sklearn.metrics import accuracy_score, f1_score
from sklearn.linear_model import LogisticRegression  #hồi quy logictic

from google.colab import files
uploaded = files.upload()

"""Đọc dữ liệu"""

df = pd.read_csv('wines_SPA (1).csv')
df.head(5)

"""Hàm df.info() sẽ cho ta biết định dạng và số lượng quan sát not-null của mỗi trường trong dataframe. Hoặc chúng ta có thể dùng hàm df. dtypes để kiểm tra định dạng dữ liệu các trường của một bảng."""

df.info()

"""describe() trả về một DataFrame mới với số hàng được hiển thị ra các thông số như giá trị trung bình, độ lệch chuẩn, min, max và tỷ lệ phần trăm của các cột. Khi được áp dụng cho Pandas DataFrame, các methods này trả về Series với kết quả cho mỗi cột."""

df.describe()

"""xử lý các cột có giá trị chữ

chuyển đổi các cột thuộc tính thiếu về giá trị thường gặp nhất
"""

imputer_cols = ['type', 'body', 'acidity', 'year']
imputer = SimpleImputer(strategy='most_frequent')  #giá trị thường xuyên nhất của cột
imputer.fit(df[imputer_cols])
df[imputer_cols] = imputer.transform(df[imputer_cols])

"""chuyển đổi các dữ liệu chữ về dạng số"""

df_label = ['winery','wine','year','country','region','type','acidity']
for col in df_label:
  df_temp = np.array(df[col]).reshape(-1,1)
  df[col] = LabelEncoder().fit_transform(df_temp)
  df

df.head(5)

"""Tách Dữ Liệu"""

X = df.iloc[:,:10]
Y = df.iloc[:,10]
X_train, X_test, y_train, y_test = train_test_split(X,Y, random_state=42, test_size = 1/3.0 )

print(X_train.shape, y_train.shape)

"""Decison Tree"""

clf = DecisionTreeClassifier(criterion="gini")
clf.fit(X_train, y_train)
y_pre = clf.predict(X_test)     # train mô hình

y_pre = clf.predict(X_test)# dự đoán

acc_dcsTree= round(accuracy_score(y_pre,y_test) * 100, 2)
acc_dcsTree

clf.tree_.n_leaves

"""Có 21 luật

"""

from sklearn import tree

plt.figure(figsize=(20,10))
tree.plot_tree(clf)
plt.show()

"""Knn"""

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

y_pre = knn.predict(X_test) #Dự Đoán

acc_Knn = round(accuracy_score(y_pre, y_test) *100, 2)
acc_Knn

"""Logistic Regression"""

LR = LogisticRegression(max_iter=10000)
LR.fit(X_train,y_train)

y_pred = LR.predict(X_test)
acc_LR = round(accuracy_score(y_pred,y_test)*100,2)

LR.intercept_

acc_LR

"""Trực quan hoá độ chính xác của ba thuật toán"""

import matplotlib.pyplot as plt
label = ["Logistic Regression","Decision Tree","KNeighborsClassifier"]
value = [acc_LR,acc_dcsTree,acc_Knn]
int_label=range(len(label))

plt.figure(figsize = (5, 4))
plt.bar(label,value,width=0.2, color="firebrick")
plt.xlabel("Thuật toán")
plt.ylabel("Độ chính xác")
plt.title("Độ chính xác của các thuật toán")
for x, y in zip(int_label, value):
    plt.text(x+0.02, y+0.05, '%.2f%%' % y, ha='center', va= 'bottom')
plt.show()
# Thêm các giá trị trên mỗi cột

from pandas.core.common import random_state

sum_knn=0
sum_dcstree=0
sum_LR=0
temp = 0
for b in range(1,11):
  print("lan lap ",b," voi random_state=",str(b*5))

  X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 1/3.0, random_state=b*5 )
  print("Train ",X_train.shape,"Test=", y_train.shape)



  #Logistic Regression
  LR = LogisticRegression(max_iter=12000)
  LR.fit(X_train,y_train)
  y_pred = LR.predict(X_test)
  acc_LR = round(accuracy_score(y_pred,y_test)*100,2)
  LR.intercept_
  print("[Logistic Regression] score is ", acc_LR)

  #Decison Tree
  clf = DecisionTreeClassifier(criterion="gini")
  clf.fit(X_train, y_train)
  y_pre = clf.predict(X_test)     # train mô hình
  y_pre = clf.predict(X_test)# dự đoán
  acc_dcsTree= round(accuracy_score(y_pre,y_test) * 100, 2)
  print("[Decison Tree] score is" , acc_dcsTree )

  #Knn
  knn = KNeighborsClassifier(n_neighbors=5)
  knn.fit(X_train, y_train)
  y_pre = knn.predict(X_test) #Dự Đoán
  acc_Knn = round(accuracy_score(y_pre, y_test) *100, 2)
  print("[KNN] score is" , acc_Knn)


  sum_LR=sum_LR + acc_LR
  sum_knn=sum_knn +acc_Knn
  sum_dcstree=sum_dcstree + acc_dcsTree

  temp = temp + 1
  print("=======================================")

print("[DCS_Tree] AVG score is" ,(sum_dcstree / temp))
 print("[KNN] AVG score is" , (sum_knn / temp))
 print("[Logistic Regression] AVG score is" ,(sum_LR / temp))

label = ["Logistic Regression","Decision Tree","KNeighborsClassifier"]
value = [(sum_dcstree / temp),(sum_knn / temp),(sum_LR / temp)]
int_label=range(len(label))

plt.figure(figsize = (5, 4))
plt.bar(label,value,width=0.2, color="firebrick")
plt.xlabel("Thuật toán")
plt.ylabel("Độ chính xác")
plt.title("Độ chính xác trung bình qua 10 lần chạy ngẫu nhiên ")
for x, y in zip(int_label, value):
    plt.text(x+0.02, y+0.05, '%.2f%%' % y, ha='center', va= 'bottom')
plt.show()